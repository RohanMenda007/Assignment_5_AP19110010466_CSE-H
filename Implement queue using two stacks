// Write a C program to implement Queue using two stacks
#include <stdio.h>
#include <stdlib.h>
struct sNode
{
	int data;
	struct sNode* next;
};
int pop(struct sNode** topref)
{
	int res;
	struct sNode* top;
	if (*topref == NULL)
	{
		printf("Stack underflow \n");
		getchar();
		exit(0);
	}
	else
	{
		top = *topref;
		res = top->data;
		*topref = top->next;
		free(top);
		return res;
	}
}
struct queue
{
	struct sNode* stack_1;
	struct sNode* stack_2;
};
void enQueue(struct queue* q, int x)
{
	push(&q->stack_1, x);
}
int deQueue(struct queue* q)
{
	int x;
	if (q->stack_1 == NULL && q->stack_2 == NULL)
	{
		printf("Q is empty");
		getchar();
		exit(0);
	}
	if (q->stack_2 == NULL)
	{
		while (q->stack_1 != NULL)
		{
			x = pop(&q->stack_1);
			push(&q->stack_2, x);
		}
	}
	x = pop(&q->stack_2);
	return x;
}
void push(struct sNode** topref, int newdata)
{
	struct sNode* newnode = (struct sNode*)malloc(sizeof(struct sNode));
	if (newnode == NULL)
	{
		printf("Stack overflow \n");
		getchar();
		exit(0);
	}
	newnode->data = newdata;
	newnode->next = (*topref);
	(*topref) = newnode;
}
int main()
{
	struct queue* q = (struct queue*)malloc(sizeof(struct queue));
	q->stack_1 = NULL;
	q->stack_2 = NULL;
	enQueue(q,1);
	enQueue(q,2);
	enQueue(q,3);
	printf("%d ",deQueue(q));
	printf("%d ",deQueue(q));
	printf("%d ",deQueue(q));
	return 0;
}
